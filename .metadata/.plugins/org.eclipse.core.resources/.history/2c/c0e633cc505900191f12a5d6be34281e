package com.spring.view;


import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.spring.biz.CategoryService;
import com.spring.biz.UserService;
import com.spring.biz.vo.Category02VO;
import com.spring.biz.vo.Category03VO;
import com.spring.biz.vo.CategoryVO;
import com.spring.biz.vo.ItemVO;
import com.spring.biz.vo.OptionsVO;

@Controller
public class AdminController {
	@Resource(name = "UserService")
	UserService userService;
	
	@Resource(name = "CategoryService")
	CategoryService categoryService;
	
	String viewPage = "viewPage";
	String adminPage = "adminPage";
	String viewTemplate = "/jsp/Template_main.jsp";
	String adminViewTemplate = "/jsp/user_admin.jsp";
	
	/*
	@RequestMapping(value = "/test")
	public String test() {
		System.out.println("==========>test");
		model.addAttribute(viewPage, "test.jsp");
		return viewTemplate;
	}
	*/
	
	//관리자 페이지
	@RequestMapping(value = "/userAdmin.do")
	public String userAdmin(Model model) {
		System.out.println("==========>userAdmin");
		return adminViewTemplate;
	}
	
	//유저 관리 페이지
	@RequestMapping(value = "/userManager.do")
	public String userManager(Model model) {
		System.out.println("==========>userManager");
		
		model.addAttribute(viewPage, "bonobono.jsp");
		return adminViewTemplate;
	}
	
	//유저 관리 페이지
	@RequestMapping(value = "/itemManager.do")
	public String itemManager(Model model) {
		System.out.println("==========>userManager");
		
		model.addAttribute(viewPage, "bonobono.jsp");
		return adminViewTemplate;
	}
	
	//아이템 추가 페이지
	@RequestMapping(value = "/itemRegistration.do")
	public String itemRegistration(Model model , CategoryVO vo) {
		System.out.println("==========>itemRegistration");
		List<CategoryVO> categoryList =  categoryService.selectCategoryList(vo);
		model.addAttribute("categoryList", categoryList);
		model.addAttribute(viewPage, "item_registration.jsp");
		return adminViewTemplate;
	}
	//카테고리 02 ajax
	@ResponseBody
	@RequestMapping(value = "/category02.do")
	public List<Category02VO> category02(Model model , Category02VO vo) {
		System.out.println("==========>category02");
		List<Category02VO> category02List = categoryService.selectCategory02List(vo);
		return category02List;
	}
	//카테고리 02 ajax
	@ResponseBody
	@RequestMapping(value = "/category03.do")
	public List<Category03VO> category03(Model model , Category03VO vo) {
		System.out.println("==========>category03");
		List<Category03VO> category03List = categoryService.selectCategory03List(vo);
		return category03List;
	}

	//아이템 추가 페이지 프로세스 itemRegistration
	@RequestMapping(value = "/itemRegistrationProc.do" , method = RequestMethod.POST)
	public String itemRegistrationProc(Model model , HttpServletRequest request , ItemVO itemVO , OptionsVO optionsVO , Category03VO category03VO ) throws IOException {
		System.out.println("==========>itemRegistrationProc");
		System.out.println(itemVO.toString());
		System.out.println(category03VO.toString());
		System.out.println(optionsVO.toString());
		
		
		//이미지 업로드 경로
		String uploadPath = request.getSession().getServletContext().getRealPath("/img/");
		//이미지 업로드 처리
		MultipartFile uploadImageFile = itemVO.getItemImageFile();
		MultipartFile uploadItemThumbnailFile = itemVO.getItemThumbnailFile();

		if (!uploadImageFile.isEmpty() && !uploadItemThumbnailFile.isEmpty()) {
			String imageFile = uploadImageFile.getOriginalFilename();
			String thumbnailFile = uploadItemThumbnailFile.getOriginalFilename();
			uploadImageFile.transferTo(new File(uploadPath + imageFile));
			uploadItemThumbnailFile.transferTo(new File(uploadPath + thumbnailFile));
			itemVO.setItemImage(uploadImageFile + imageFile);
			itemVO.setItemImage(uploadItemThumbnailFile + thumbnailFile);
		}
		
		model.addAttribute(viewPage, "bonobono.jsp");
		return adminViewTemplate;
	}
	
	//보드 관리 페이지
	@RequestMapping(value = "/boardManager.do")
	public String boardManager(Model model) {
		System.out.println("==========>userManager");
		
		model.addAttribute(viewPage, "bonobono.jsp");
		return adminViewTemplate;
	}
	
	//카테고리 관리 페이지
	@RequestMapping(value = "/categoryManager.do")
	public String categoryManager(Model model ) {
		System.out.println("==========>userManager");
		
		model.addAttribute(viewPage, "bonobono.jsp");
		return adminViewTemplate;
	}
	
	

}
