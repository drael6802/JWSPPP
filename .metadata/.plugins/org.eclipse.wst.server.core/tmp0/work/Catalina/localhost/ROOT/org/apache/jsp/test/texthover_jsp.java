/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-04-03 03:17:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class texthover_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<title>http://www.blueb.co.kr</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("/* Circle Text Styles */\r\n");
      out.write("#outerCircleText {\r\n");
      out.write("/* Optional - DO NOT SET FONT-SIZE HERE, SET IT IN THE SCRIPT */\r\n");
      out.write("font-style: italic;\r\n");
      out.write("font-weight: bold;\r\n");
      out.write("font-family: verdana;\r\n");
      out.write("color: #000;\r\n");
      out.write("/* End Optional */\r\n");
      out.write("\r\n");
      out.write("/* Start Required - Do Not Edit */\r\n");
      out.write("position: absolute;top: 0;left: 0;z-index: 3000;cursor: default;}\r\n");
      out.write("#outerCircleText div {position: relative;}\r\n");
      out.write("#outerCircleText div div {position: absolute;top: 0;left: 0;text-align: center;}\r\n");
      out.write("/* End Required */\r\n");
      out.write("/* End Circle Text Styles */\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write(";(function(){\r\n");
      out.write("\r\n");
      out.write("//메세지 입력\r\n");
      out.write("var msg = \"도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈도빈\";\r\n");
      out.write("\r\n");
      out.write("/* THE REST OF THE EDITABLE VALUES BELOW ARE ALL UNQUOTED NUMBERS */\r\n");
      out.write("\r\n");
      out.write("// Set font's style size for calculating dimensions\r\n");
      out.write("// Set to number of desired pixels font size (decimal and negative numbers not allowed)\r\n");
      out.write("var size = 22;\r\n");
      out.write("\r\n");
      out.write("// Set both to 1 for plain circle, set one of them to 2 for oval\r\n");
      out.write("// Other numbers & decimals can have interesting effects, keep these low (0 to 3)\r\n");
      out.write("var circleY = 0.75; var circleX = 2;\r\n");
      out.write("\r\n");
      out.write("// The larger this divisor, the smaller the spaces between letters\r\n");
      out.write("// (decimals allowed, not negative numbers)\r\n");
      out.write("var letter_spacing = 5;\r\n");
      out.write("\r\n");
      out.write("// The larger this multiplier, the bigger the circle/oval\r\n");
      out.write("// (decimals allowed, not negative numbers, some rounding is applied)\r\n");
      out.write("var diameter = 10;\r\n");
      out.write("\r\n");
      out.write("// Rotation speed, set it negative if you want it to spin clockwise (decimals allowed)\r\n");
      out.write("var rotation = 0.4;\r\n");
      out.write("\r\n");
      out.write("// This is not the rotation speed, its the reaction speed, keep low!\r\n");
      out.write("// Set this to 1 or a decimal less than one (decimals allowed, not negative numbers)\r\n");
      out.write("var speed = 0.3;\r\n");
      out.write("\r\n");
      out.write("////////////////////// Stop Editing //////////////////////\r\n");
      out.write("\r\n");
      out.write("if (!window.addEventListener && !window.attachEvent || !document.createElement) return;\r\n");
      out.write("\r\n");
      out.write("msg = msg.split('');\r\n");
      out.write("var n = msg.length - 1, a = Math.round(size * diameter * 0.208333), currStep = 20,\r\n");
      out.write("ymouse = a * circleY + 20, xmouse = a * circleX + 20, y = [], x = [], Y = [], X = [],\r\n");
      out.write("o = document.createElement('div'), oi = document.createElement('div'),\r\n");
      out.write("b = document.compatMode && document.compatMode != \"BackCompat\"? document.documentElement : document.body,\r\n");
      out.write("\r\n");
      out.write("mouse = function(e){\r\n");
      out.write(" e = e || window.event;\r\n");
      out.write(" ymouse = !isNaN(e.pageY)? e.pageY : e.clientY; // y-position\r\n");
      out.write(" xmouse = !isNaN(e.pageX)? e.pageX : e.clientX; // x-position\r\n");
      out.write("},\r\n");
      out.write("\r\n");
      out.write("makecircle = function(){ // rotation/positioning\r\n");
      out.write(" if(init.nopy){\r\n");
      out.write("  o.style.top = (b || document.body).scrollTop + 'px';\r\n");
      out.write("  o.style.left = (b || document.body).scrollLeft + 'px';\r\n");
      out.write(" };\r\n");
      out.write(" currStep -= rotation;\r\n");
      out.write(" for (var d, i = n; i > -1; --i){ // makes the circle\r\n");
      out.write("  d = document.getElementById('iemsg' + i).style;\r\n");
      out.write("  d.top = Math.round(y[i] + a * Math.sin((currStep + i) / letter_spacing) * circleY - 15) + 'px';\r\n");
      out.write("  d.left = Math.round(x[i] + a * Math.cos((currStep + i) / letter_spacing) * circleX) + 'px';\r\n");
      out.write(" };\r\n");
      out.write("},\r\n");
      out.write("\r\n");
      out.write("drag = function(){ // makes the resistance\r\n");
      out.write(" y[0] = Y[0] += (ymouse - Y[0]) * speed;\r\n");
      out.write(" x[0] = X[0] += (xmouse - 20 - X[0]) * speed;\r\n");
      out.write(" for (var i = n; i > 0; --i){\r\n");
      out.write("  y[i] = Y[i] += (y[i-1] - Y[i]) * speed;\r\n");
      out.write("  x[i] = X[i] += (x[i-1] - X[i]) * speed;\r\n");
      out.write(" };\r\n");
      out.write(" makecircle();\r\n");
      out.write("},\r\n");
      out.write("\r\n");
      out.write("init = function(){ // appends message divs, & sets initial values for positioning arrays\r\n");
      out.write(" if(!isNaN(window.pageYOffset)){\r\n");
      out.write("  ymouse += window.pageYOffset;\r\n");
      out.write("  xmouse += window.pageXOffset;\r\n");
      out.write(" } else init.nopy = true;\r\n");
      out.write(" for (var d, i = n; i > -1; --i){\r\n");
      out.write("  d = document.createElement('div'); d.id = 'iemsg' + i;\r\n");
      out.write("  d.style.height = d.style.width = a + 'px';\r\n");
      out.write("  d.appendChild(document.createTextNode(msg[i]));\r\n");
      out.write("  oi.appendChild(d); y[i] = x[i] = Y[i] = X[i] = 0;\r\n");
      out.write(" };\r\n");
      out.write(" o.appendChild(oi); document.body.appendChild(o);\r\n");
      out.write(" setInterval(drag, 25);\r\n");
      out.write("},\r\n");
      out.write("\r\n");
      out.write("ascroll = function(){\r\n");
      out.write(" ymouse += window.pageYOffset;\r\n");
      out.write(" xmouse += window.pageXOffset;\r\n");
      out.write(" window.removeEventListener('scroll', ascroll, false);\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("o.id = 'outerCircleText'; o.style.fontSize = size + 'px';\r\n");
      out.write("\r\n");
      out.write("if (window.addEventListener){\r\n");
      out.write(" window.addEventListener('load', init, false);\r\n");
      out.write(" document.addEventListener('mouseover', mouse, false);\r\n");
      out.write(" document.addEventListener('mousemove', mouse, false);\r\n");
      out.write("  if (/Apple/.test(navigator.vendor))\r\n");
      out.write("   window.addEventListener('scroll', ascroll, false);\r\n");
      out.write("}\r\n");
      out.write("else if (window.attachEvent){\r\n");
      out.write(" window.attachEvent('onload', init);\r\n");
      out.write(" document.attachEvent('onmousemove', mouse);\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("})();\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
