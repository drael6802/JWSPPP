/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2019-04-03 03:13:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Particles_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html lang=\"kr\">\r\n");
      out.write("\t<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>Particles</title>\r\n");
      out.write("\r\n");
      out.write("<style rel=\"stylesheet\">\r\n");
      out.write("html, body {\r\n");
      out.write("  background: #fff;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  height: 100%;\r\n");
      out.write("  overflow: hidden;\r\n");
      out.write("  cursor: default;\r\n");
      out.write("  -webkit-user-select: none;\r\n");
      out.write("     -moz-user-select: none;\r\n");
      out.write("      -ms-user-select: none;\r\n");
      out.write("          user-select: none;\r\n");
      out.write("  font-family: 'PT Sans', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".title {\r\n");
      out.write("  font-size: 10vw;\r\n");
      out.write("  font-weight: 700;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  margin-top: 15%;\r\n");
      out.write("  color: #444;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".subtitle {\r\n");
      out.write("  font-size: 4vw;\r\n");
      out.write("  color: #777;\r\n");
      out.write("  font-weight: normal;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  margin-top: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".credit {\r\n");
      out.write("  position: absolute;\r\n");
      out.write("  bottom: 5px;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  display: block;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  color: #777;\r\n");
      out.write("}\r\n");
      out.write(".credit > a {\r\n");
      out.write("  color: #777;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".particle-count {\r\n");
      out.write("  display: block;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  margin: 25px 0;\r\n");
      out.write("  z-index: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".particles > .particle {\r\n");
      out.write("  border-radius: 100%;\r\n");
      out.write("  background: transparent;\r\n");
      out.write("  position: absolute;\r\n");
      out.write("  background-size: 100% 100%;\r\n");
      out.write("  background-repeat: no-repeat;\r\n");
      out.write("}\r\n");
      out.write(".particles > .particle.smaller {\r\n");
      out.write("  width: 5px;\r\n");
      out.write("  height: 5px;\r\n");
      out.write("}\r\n");
      out.write(".particles > .particle.small {\r\n");
      out.write("  width: 10px;\r\n");
      out.write("  height: 10px;\r\n");
      out.write("}\r\n");
      out.write(".particles > .particle.normal {\r\n");
      out.write("  width: 15px;\r\n");
      out.write("  height: 15px;\r\n");
      out.write("}\r\n");
      out.write(".particles > .particle.big {\r\n");
      out.write("  width: 20px;\r\n");
      out.write("  height: 20px;\r\n");
      out.write("}\r\n");
      out.write(".particles > .particle.bigger {\r\n");
      out.write("  width: 25px;\r\n");
      out.write("  height: 25px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class='particles'></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js\"></script> \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var d = document,\r\n");
      out.write("  $d = $(d),\r\n");
      out.write("  w = window,\r\n");
      out.write("  $w = $(w),\r\n");
      out.write("  wWidth = $w.width(),\r\n");
      out.write("  wHeight = $w.height(),\r\n");
      out.write("  credit = $('.credit > a'),\r\n");
      out.write("  particles = $('.particles'),\r\n");
      out.write("  particleCount = 0,\r\n");
      out.write("  sizes = [\r\n");
      out.write("    15, 20, 25, 35, 45\r\n");
      out.write("  ],\r\n");
      out.write("  colors = [\r\n");
      out.write("    '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',\r\n");
      out.write("    '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50',\r\n");
      out.write("    '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',\r\n");
      out.write("    '#FF5722', '#795548', '#9E9E9E', '#607D8B', '#777777'\r\n");
      out.write("  ],\r\n");
      out.write("\r\n");
      out.write("  mouseX = $w.width() / 2,\r\n");
      out.write("  mouseY = $w.height() / 2;\r\n");
      out.write("\r\n");
      out.write("function updateParticleCount() {\r\n");
      out.write("  $('.particle-count > .number').text(particleCount);\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("$w\r\n");
      out.write("  .on('resize', function() {\r\n");
      out.write("    wWidth = $w.width();\r\n");
      out.write("    wHeight = $w.height();\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("$d\r\n");
      out.write("  .on('mousemove touchmove', function(event) {\r\n");
      out.write("    event.preventDefault();\r\n");
      out.write("    event.stopPropagation();\r\n");
      out.write("    mouseX = event.clientX;\r\n");
      out.write("    mouseY = event.clientY;\r\n");
      out.write("    if (!!event.originalEvent.touches) {\r\n");
      out.write("      mouseX = event.originalEvent.touches[0].clientX;\r\n");
      out.write("      mouseY = event.originalEvent.touches[0].clientY;\r\n");
      out.write("    }\r\n");
      out.write("  })\r\n");
      out.write("  .on('mousedown touchstart', function(event) {\r\n");
      out.write("    if (event.target === credit.get(0)) {\r\n");
      out.write("      return;\r\n");
      out.write("    }\r\n");
      out.write("    mouseX = event.clientX;\r\n");
      out.write("    mouseY = event.clientY;\r\n");
      out.write("    if (!!event.originalEvent.touches) {\r\n");
      out.write("      mouseX = event.originalEvent.touches[0].clientX;\r\n");
      out.write("      mouseY = event.originalEvent.touches[0].clientY;\r\n");
      out.write("    }\r\n");
      out.write("    var timer = setInterval(function() {\r\n");
      out.write("      $d\r\n");
      out.write("        .one('mouseup mouseleave touchend touchcancel touchleave', function() {\r\n");
      out.write("          clearInterval(timer);\r\n");
      out.write("        })\r\n");
      out.write("      createParticle(event);\r\n");
      out.write("    }, 1000 / 60)\r\n");
      out.write("\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("function createParticle(event) {\r\n");
      out.write("  var particle = $('<div class=\"particle\"/>'),\r\n");
      out.write("    size = sizes[Math.floor(Math.random() * sizes.length)],\r\n");
      out.write("    color = colors[Math.floor(Math.random() * colors.length)],\r\n");
      out.write("    negative = size / 2,\r\n");
      out.write("    speedHorz = Math.random() * 10,\r\n");
      out.write("    speedUp = Math.random() * 25,\r\n");
      out.write("    spinVal = 360 * Math.random(),\r\n");
      out.write("    spinSpeed = ((36 * Math.random())) * (Math.random() <= .5 ? -1 : 1),\r\n");
      out.write("    otime,\r\n");
      out.write("    time = otime = (1 + (.5 * Math.random())) * 1000,\r\n");
      out.write("    top = (mouseY - negative),\r\n");
      out.write("    left = (mouseX - negative),\r\n");
      out.write("    direction = Math.random() <= .5 ? -1 : 1,\r\n");
      out.write("    life = 10;\r\n");
      out.write("\r\n");
      out.write("  particle\r\n");
      out.write("    .css({\r\n");
      out.write("      height: size + 'px',\r\n");
      out.write("      width: size + 'px',\r\n");
      out.write("      top: top + 'px',\r\n");
      out.write("      left: left + 'px',\r\n");
      out.write("      background: color,\r\n");
      out.write("      transform: 'rotate(' + spinVal + 'deg)',\r\n");
      out.write("      webkitTransform: 'rotate(' + spinVal + 'deg)'\r\n");
      out.write("    })\r\n");
      out.write("    .appendTo(particles);\r\n");
      out.write("  particleCount++;\r\n");
      out.write("  updateParticleCount();\r\n");
      out.write("\r\n");
      out.write("  var particleTimer = setInterval(function() {\r\n");
      out.write("    time = time - life;\r\n");
      out.write("    left = left - (speedHorz * direction);\r\n");
      out.write("    top = top - speedUp;\r\n");
      out.write("    speedUp = Math.min(size, speedUp - 1);\r\n");
      out.write("    spinVal = spinVal + spinSpeed;\r\n");
      out.write("\r\n");
      out.write("    particle\r\n");
      out.write("      .css({\r\n");
      out.write("        height: size + 'px',\r\n");
      out.write("        width: size + 'px',\r\n");
      out.write("        top: top + 'px',\r\n");
      out.write("        left: left + 'px',\r\n");
      out.write("        opacity: ((time / otime) / 2) + .25,\r\n");
      out.write("        transform: 'rotate(' + spinVal + 'deg)',\r\n");
      out.write("        webkitTransform: 'rotate(' + spinVal + 'deg)'\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("    if (time <= 0 || left <= -size || left >= wWidth + size || top >= wHeight + size) {\r\n");
      out.write("      particle.remove();\r\n");
      out.write("      particleCount--;\r\n");
      out.write("      updateParticleCount();\r\n");
      out.write("      clearInterval(particleTimer);\r\n");
      out.write("    }\r\n");
      out.write("  }, 1000 / 50);\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
